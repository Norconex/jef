            ------
            Configuration
            ------
            Norconex Inc.
            ------

TODO

Configuration

  While Norconex Importer works out-of-the-box with its default settings, 
  you will only unlock its full potential if you take time to configure it
  properly using Java or XML.   

  Refer to the following for an XML based configuration. 
  Entries with a "class" attribute are expecting an implementation
  of your choice.   The importer API offers several concrete implementations
  already.  Developers can also create their own
  by implementing the proper Java interfaces. Refer to the  
  {{{./apidocs/index.html}Importer JavaDoc}} 
  and/or see further down what interfaces you can implement to provide custom 
  functionality. Got to the {{{./extend.html} Extend}} page for more details on 
  adding your own implementations.
  
+-------------------------------+
<importer>

    <documentParserFactory class="..." />

    <taggers>
        <tagger class="..." />
    </taggers>

    <transformers >
        <transformer class="..." />
    </transformers>

    <filters>
        <filter class="...">
    </filter>

</importer>
+-------------------------------+

  The table below only list the class or interface name.  
  They are all optional.  In the
  configuration file, <<you have to use the fully qualified name>>, as defined
  in the Javadoc.  Click on a class or interface name to go directly to its
  full documentation, including with extra configuration options.

*----------+--------------+----------------+----------------+
|| Tag     || Description || Classes       || Interface     |
*----------+--------------+----------------+----------------+
| <<<documentParserFactory>>> | Factory dictating which document parser to use content types encountered.| {{{./apidocs/com/norconex/importer/parser/DefaultDocumentParserFactory.html}DefaultDocumentParserFactory}} (Default) | {{{./apidocs/com/norconex/importer/parser/IDocumentParserFactory.html}IDocumentParserFactory}} |
*----------+--------------+----------------+----------------+
| <<<tagger>>> | Taggers allow to add to or modify existing document metadata. | {{{./apidocs/com/norconex/importer/tagger/ConstantTagger.html}ConstantTagger}}, {{{TODO}ReplaceTagger}}, {{{./apidocs/com/norconex/importer/tagger/ForceSingleValueTagger.html}ForceSingleValueTagger}}, {{{./apidocs/com/norconex/importer/tagger/KeepOnlyTagger.html}KeepOnlyTagger}}, {{{./apidocs/com/norconex/importer/tagger/DeleteTagger.html}DeleteTagger}} | {{{./apidocs/com/norconex/importer/tagger/IDocumentTagger.html}IDocumentTagger}} |
*----------+--------------+----------------+----------------+
| <<<transformer>>> | Transformers allow to manipulate and convert extracted text and save the modified text back. |  | {{{./apidocs/com/norconex/importer/transformer/IDocumentTransformer.html}IDocumentTransformer}} |
*----------+--------------+----------------+----------------+
| <<<filter>>> | Allows to filter out certain incoming documents. |  | {{{./apidocs/com/norconex/importer/filter/IDocumentFilter.html}IDocumentFilter}} |
*----------+--------------+----------------+----------------+

* Example

  Pretend you are building a service that offers content extracted from 
  documents of various nature.   You have a special batch that you want your 
  system to treat as "News" documents.   You want to add a metadata value to 
  each of these documents to mark them as such. You also noticed that some of 
  these documents are HTML files with two "title" meta tags, and you want to 
  keep only the first one encountered to avoid possible issues.  The following 
  will accomplish this for you:

+-------------------------------+
<importer>

    <taggers>
        <tagger class="com.norconex.importer.tagger.ConstantTagger">
            <constant name="doctype">News</constant>
        </tagger>
        <tagger class="com.norconex.importer.tagger.SingleValueTagger">
            <singleValue field="title" action="keepFirst"/>
        </tagger>
    </taggers>

</importer>
+-------------------------------+

  Refer to this {{{TODO}additional documentation}} for more generic 
  configuration options such as creating reusable configuration fragments
  and using variables to make your file easier to maintain and more portable
  across different environments.




