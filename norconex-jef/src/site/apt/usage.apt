            ------
            Usage
            ------
            Norconex Inc.
            ------


TODO

Usage

  Use the java importer as a command-line application or java library.

* Command line

+-------------------------------+
usage: importer[.bat|.sh]
 -c,--config <arg>        Optional: Importer XML configuration file.
 -i,--inputFile <arg>     Required: File to be imported.
 -o,--outputFile <arg>    Optional: File where the imported content will
                          be stored.
 -r,--reference <arg>     Optional: Alternate unique qualifier for the
                          input file (e.g. URL).
 -t,--contentType <arg>   Optional: The MIME Content-type of the input
                          file.
+-------------------------------+

* Java

  Add the Importer JAR and dependant libraries to your application classpath.
  It is recommended you configure the 
  {{{./apidocs/com/norconex/importer/Importer.html}Importer}} class,
  by passing it a 
  {{{./apidocs/com/norconex/importer/ImporterConfig.html}ImporterConfig}}.
  You can build the configuration using java, 
  or by loading an XML file using the 
  {{{./apidocs/com/norconex/importer/ImporterConfigLoader.html}ImporterConfigLoader}}
  class. Below is a sample code usage:

+-------------------------------+
/* XML configuration: */
//ImporterConfig config = ImporterConfigLoader.loadImporterConfig(
//    myXMLFile, myVariableFile);

/* Java configuration: */
ImporterConfig config = new ImporterConfig();
config.setsetTaggers(new IDocumentTagger[]{/* taggers here */});
config.setTransformers(new IDocumentTransformer[] {/* transformers here */});
config.setFilters(new IDocumentFilter[]{/* taggers here */});

Importer importer = new Importer(config);

File inputFile = ... // the file to be converted
File outputFile = ... // the file that will contain the extracted text
Metadata metadata = new Metadata();
boolean accepted = importer.importDocument(inputFile, outputFile, metadata);
if (accepted) {
    System.out.println("File was imported to : " + outputFile);
} else {
    System.out.println("File was rejected.");
}
+-------------------------------+

  Refer to the {{{./apidocs/index.html}Importer Javadoc}} for more 
  documentation or the {{{./configuration.html}Configuration}} page for the 
  XML configuration options.

** Extend the Importer

  To create your own feature implementations, create a new Java project in your
  favourite IDE. Add to your classpath all the files contained in the "lib" 
  folder of the Importer installation.  Configure your project to have its
  binary output directory to be the "classes" folder of the importer.
  Automatically, code created and stored under "classes" will be picked up
  by the Importer when run.


